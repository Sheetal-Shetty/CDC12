apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: Github-pages-deploy-from-github
  title: Backstage Driven Internal Developer Platform
  description: Automates website deployment using Docker containers or GitHub Pages hosting.
spec:
  owner: user:guest
  type: service

  
  parameters:
    - title: GitHub Repository URL
      required: 
        - Github_URL
        #- Dockerfile
        #- Port
      properties:
        Github_URL:
          title: Enter you Github URL
          type: string
          description: Enter the github URL where your code exists
          ui:autofocus: true

    - title: Select where you want to deploy your code
      required:
        - stack
      properties:
        stack:
          title: Select from below list
          type: string
          enum:
            - Docker
            - Github pages
            - Baremetal
            - Kubernetes
  
    - title: Enter below details
      dependencies:
        stack:
          oneOf:
            - properties:
                stack:
                  const: Docker
                extraFields:          # üëà wrap everything else inside a schema key
                  title: Enter the details
                  type: object
                  properties:
                    Dockerfile:
                      title: Enter the Path of Dockerfile
                      type: string
                      description: Enter the Dockerfile path (e.g. build/Dockerfile or enter Dockerfile if it is in root) 
                      default: "Dockerfile" 
                    Port:
                      title: Enter the Port number
                      type: integer
                      minimum: 1
                      maximum: 65535
                      description: Enter the Port number of your application (e.g. 80/3000/5000)
  
            - properties:
                stack:
                  const: Github pages
                extraFields:
                  type: object
                  properties: 
                    # Github:
                    #   title: Enter the Path of Github Url
                    #   type: string
                    #   description: Enter the Github URL 
                      
                      
                    GithubToken:
                      title: Enter the Github Token
                      type: string
                      description: Enter the token
                       
  
            - properties:
                stack:
                  const: Baremetal
                extraFields:
                  type: object
                  properties: {}
  
            - properties:
                stack:
                  const: Kubernetes
                extraFields:
                  type: object
                  properties: {}
          
  steps:
    - id: fetch-template
      name: Fetch template files
      if: ${{ parameters.stack == 'Docker' }}
      action: fetch:plain
      input:
        url: ${{ parameters.Github_URL }}
        targetPath: .


    - id: build_docker
      name: Build Docker Image
      if: ${{ parameters.stack == 'Docker' }}
      action: shell:run
      input:
        cwd: ${{ steps.clone.output.path }}
        command: docker 
        args: ["build", "-f", "${{ parameters.extraFields.Dockerfile }}", "-t", "my-image:latest", "."]


    - id: cleanup
      name: Remove old container if exists
      if: ${{ parameters.stack == 'Docker' }}
      action: shell:run
      input:
        command: docker
        args: ["rm", "-f", "Cafe-container"]
                

    - id: deploy_docker
      name: Deploy Docker Container
      if: ${{ parameters.stack == 'Docker' }}
      action: shell:run
      input:
        cwd: ${{ steps.clone.output.path }}
        command: docker
        args: ["run", "--name", "Cafe-container", "-it", "-d", "-p", "89:${{ parameters.extraFields.Port }}", "my-image:latest"] 

    - id: start_timer
      name: Start Timer
      if: ${{ parameters.stack == 'Github pages' }}
      action: debug:log
      input:
        message: ${{ (setvar "start_time" (now)) }}

    - id: fetch
      name: Fetch GitHub Repo
      if: ${{ parameters.stack == 'Github pages' }}
      action: fetch:plain
      input:
        url: ${{ parameters.Github_URL }}
        targetPath: ./site  # fetch code into ./site folder

    # - id: build
    #   name: Build Project
    #   action: shell:run
    #   input:
    #     command: bash
    #     args:
    #       - -c
    #       - |
    #         set -euo pipefail
    #         echo "üìÅ Working directory: $(pwd)"
    #         echo "üîç Detecting project type..."
    
    #         PACKAGE_JSON=$(find . -name package.json -print -quit || true)
    #         REQUIREMENTS=$(find . -name requirements.txt -print -quit || true)
    
    #         if [ -n "$PACKAGE_JSON" ]; then
    #           echo "üì¶ Node.js project detected at $PACKAGE_JSON"
    #           cd "$(dirname "$PACKAGE_JSON")"
    #           npm install
    #           npm run build || { echo "‚ùå npm build failed"; exit 1; }
    
    #           if [ -d build ]; then
    #             mv build ../dist
    #           elif [ -d dist ]; then
    #             mv dist ../dist
    #           fi
    #           echo "‚úÖ Node.js build complete"
    
    #         elif [ -n "$REQUIREMENTS" ]; then
    #           echo "üêç Python project detected at $REQUIREMENTS"
    #           cd "$(dirname "$REQUIREMENTS")"
    #           pip install -r requirements.txt
    #           # optionally run python build step if you have one
    #           echo "‚úÖ Python dependencies installed"
    #           mkdir -p ../dist
    #           cp -r . ../dist
    
    #         elif [ -f "index.html" ]; then
    #           echo "üåê Static site detected, copying to dist..."
    #           mkdir -p ./dist
    #           cp -r ./* ./dist
    #           echo "‚úÖ Static site ready"
    
    #         else
    #           echo "‚ö†Ô∏è Unknown project type, skipping build."
    #         fi
    #     cwd: ./site
    

    - id: build
      name: Prepare Static Site
      if: ${{ parameters.stack == 'Github pages' }}
      action: shell:run
      input:
        command: bash
        args:
          - -c
          - |
            set -e
            echo "üåê Static site detected"
            echo "üìç Working directory: $(pwd)"
            echo "üìÇ Files present (excluding hidden):"
            find . -maxdepth 2 -not -path '*/.*'
    
            echo "üì¶ Creating ./dist folder"
            mkdir -p ./dist
    
            # Copy visible files from root if any
            if [ "$(ls -A | grep -v '^\.' | wc -l)" -gt 0 ]; then
              echo "üìã Copying files from root to ./dist..."
              rsync -av --exclude='.*' ./ ./dist/
            fi
    
            # Copy all non-hidden subfolders into dist
            SUBFOLDERS=$(find . -mindepth 1 -maxdepth 1 -type d -not -name '.*')
            for F in $SUBFOLDERS; do
              echo "üìÇ Copying contents of $F to ./dist..."
              rsync -av --exclude='.*' "$F"/ ./dist/
            done
    
            echo "‚úÖ All static files copied to ./dist successfully!"
        cwd: ./site
        

    - id: publish
      name: Deploy Static Site to GitHub Pages
      if: ${{ parameters.stack == 'Github pages' }}
      action: shell:run
      input:
        command: bash
        args:
          - -c
          - |
            set -e
            cd ./site/dist

            # Take the user input GitHub URL
            USER_URL="${{ parameters.Github_URL }}"
            
            # Remove trailing slash if present
            USER_URL="${USER_URL%/}"
            
            # Add token for authentication
            AUTH_URL="https://x-access-token:${{ parameters.extraFields.GithubToken }}@${USER_URL#https://}"

            git init
            git config user.email "backstage@automation.local"
            git config user.name "Backstage Bot"
            git remote add origin "$AUTH_URL"
            git checkout -b gh-pages || git checkout gh-pages
            git add .
            git commit -m "Deploy from Backstage Template"
            git push --force origin gh-pages

#########this is commented on 10-15-2025 at 11am to skip enable github pages
    # git remote add origin https://x-access-token:${{ parameters.extraFields.GithubToken }}@github.com/Meghana-shetty/CafeStaticWebsite.git
    # - id: enable-pages
    #   name: Enable GitHub Pages
    #   if: ${{ parameters.stack == 'Github pages' }}
    #   action: github:pages:enable
    #   input:
    #     repoUrl: ${{ parameters.extraFields.Github }}
    #     buildType: workflow
    #     sourceBranch: gh-pages
    #     sourcePath: /
    #     token: ${{ parameters.extraFields.GithubToken }}

##########commented on 10-15-2025 at 11am

#########below are previous code
    # - id: build
    #   name: Build Project
    #   action: shell:run
    #   input:
    #     command: bash
    #     args:
    #       - -c
    #       - |
    #         # Node.js
    #         PACKAGE_JSON=$(find . -name package.json -print -quit)
    #         if [ -n "$PACKAGE_JSON" ]; then
    #           cd $(dirname "$PACKAGE_JSON")
    #           npm install
    #           npm run build
    #           # Normalize output to ./dist
    #           if [ -d build ]; then mv build ../dist; elif [ -d dist ]; then mv dist ../dist; fi
    #         elif [ -f "index.html" ]; then
    #           # plain static site, just copy to ./dist
    #           mkdir -p ./dist
    #           cp -r ./* ./dist
    #         else
    #           echo "‚ö†Ô∏è Unknown project type; no build executed"
    #         fi
    #     cwd: ./site

   

    # - id: publish
    #   name: Publish to GitHub Pages
    #   action: publish:github
    #   input:
    #     repoUrl: ${{ parameters.extraFields.Github }}  # GitHub repo URL
    #     defaultBranch: gh-pages
    #     sourcePath: ./site/dist  # folder containing final static site
    #     protectDefaultBranch: false

    # - id: enable-pages
    #   name: Enable GitHub Pages
    #   if: ${{ parameters.stack == 'Github pages' }}
    #   action: github:pages:enable
    #   input:
    #     repoUrl: ${{ parameters.extraFields.Github }}
    #     buildType: workflow
    #     sourceBranch: gh-pages
    #     sourcePath: /
    #     token: ${{ parameters.extraFields.GithubToken }}


######till here############################################
    # - id: github-pages
    #   name: Enable GitHub Pages
    #   if: ${{ parameters.stack == 'Github pages' }}
    #   action: github:pages:enable
    #   input:
    #     repoUrl: ${{ parameters.extraFields.Github }} # github.com?repo=Cafe-static-last&owner=Meghana-shetty
    #     buildType: workflow
    #     sourceBranch: main
    #     sourcePath: /
    #     token: ${{ parameters.extraFields.GithubToken }}

  output:
    links:
      - title: "View on GitHub Pages"
        #if: "${{ parameters.deploy_method == 'github pages' }}"
        if: ${{ parameters.stack == 'Github pages' }}
        url: "https://${{ parameters.Github_URL | replace('https://github.com/', '') | replace('.git', '') | replace('/', '.github.io/') }}/"
        #url: ${{ steps.github-pages.output.pageUrl }}
        icon: "website"

      - title: "Open Website"
        if: ${{ parameters.stack == 'Docker' }}
        url: "http://localhost:89"
        icon: "website"
